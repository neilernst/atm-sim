package edu.cmu.sei.atm.ui;


import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

import edu.cmu.sei.atm.BalanceInquiry;
import edu.cmu.sei.atm.BankDatabase;
import edu.cmu.sei.atm.CashDispenser;
import edu.cmu.sei.atm.Deposit;
import edu.cmu.sei.atm.Transaction;
import edu.cmu.sei.atm.Withdrawal;

/*
 * ATMGUI.java
 *
 * Created on May 4, 2010, 5:55:12 PM
 */
/**
 *
 * @author senouci hadj
 */
public class ATMGUI extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -2855234907549009879L;

	/** Creates new form ATMGUI */
    public ATMGUI() {
        initComponents();
        initOutComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelScreen = new javax.swing.JPanel();
        jPanelkeypad = new javax.swing.JPanel();
        jPanelDepositSlot = new javax.swing.JPanel();
        jLabelImageDepositSlot = new javax.swing.JLabel();
        jLabelCashDispenser = new javax.swing.JLabel();
        jPanelInsertCard = new javax.swing.JPanel();
        jLabelImageInsertCard = new javax.swing.JLabel();
        jLabellogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanelScreen.setOpaque(false);
        jPanelScreen.setPreferredSize(new java.awt.Dimension(515, 350));
        jPanelScreen.setLayout(new java.awt.GridLayout(1, 0));

        jPanelkeypad.setOpaque(false);
        jPanelkeypad.setPreferredSize(new java.awt.Dimension(300, 160));
        jPanelkeypad.setVerifyInputWhenFocusTarget(false);
        jPanelkeypad.setLayout(new java.awt.GridLayout(1, 0));

        jPanelDepositSlot.setOpaque(false);
        jPanelDepositSlot.setPreferredSize(new java.awt.Dimension(200, 100));

        javax.swing.GroupLayout jPanelDepositSlotLayout = new javax.swing.GroupLayout(jPanelDepositSlot);
        jPanelDepositSlot.setLayout(jPanelDepositSlotLayout);
        jPanelDepositSlotLayout.setHorizontalGroup(
            jPanelDepositSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelImageDepositSlot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        jPanelDepositSlotLayout.setVerticalGroup(
            jPanelDepositSlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelImageDepositSlot, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        jPanelInsertCard.setOpaque(false);
        jPanelInsertCard.setPreferredSize(new java.awt.Dimension(200, 100));

        javax.swing.GroupLayout jPanelInsertCardLayout = new javax.swing.GroupLayout(jPanelInsertCard);
        jPanelInsertCard.setLayout(jPanelInsertCardLayout);
        jPanelInsertCardLayout.setHorizontalGroup(
            jPanelInsertCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelImageInsertCard, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        jPanelInsertCardLayout.setVerticalGroup(
            jPanelInsertCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelImageInsertCard, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        this.getContentPane().setBackground(Color.DARK_GRAY);

        jLabellogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/cmu/sei/atm/resources/Credit-Card-Logos.png"))); // NOI18N
        jLabellogo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.black, java.awt.Color.black));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabellogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelInsertCard, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(jPanelDepositSlot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelkeypad, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 315, Short.MAX_VALUE)
                        .addComponent(jLabelCashDispenser, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabellogo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelInsertCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jPanelDepositSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanelScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelkeypad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelCashDispenser, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initOutComponents() {

        userAuthenticated = false; // user is not authenticated to start
        currentAccountNumber = 0; // no current account number to start
        //screen = new Screen(); // create screen
        //keypad = new Keypad(); // create keypad
        cashDispenser = new CashDispenser(); // create cash dispenser
        depositSlot = new DepositSlot(); // create deposit slot
        cardSlot = new CardSlot();// create card slot
        bankDatabase = new BankDatabase(); // create acct info database
        jPanelScreen.add(screen);
        screen.setLocation(0, 0);

        jPanelkeypad.add(keypad);
        keypad.setSize(280, 160);

        jPanelDepositSlot.add(depositSlot);
        jPanelDepositSlotDraw("/edu/cmu/sei/atm/resources/DepositSlot.jpg");
        depositSlot.setSize(170, 20);
        depositSlot.setLocation(15, 75);
        depositSlot.setEnabled(false);
        depositSlot.setText("Put The Money");

        jPanelInsertCard.add(cardSlot);
        jPanelInsertCardDraw("/edu/cmu/sei/atm/resources/InsertCard.jpg");
        cardSlot.setSize(170, 20);
        cardSlot.setLocation(15, 75);
        cardSlot.setEnabled(false);
        cardSlot.setText("Insert Card");
        this.setLocationRelativeTo(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        ATMGUI atm = new ATMGUI();
        atm.setVisible(true);
        atm.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCashDispenser;
    private javax.swing.JLabel jLabelImageDepositSlot;
    private javax.swing.JLabel jLabelImageInsertCard;
    private javax.swing.JLabel jLabellogo;
    private javax.swing.JPanel jPanelDepositSlot;
    private javax.swing.JPanel jPanelInsertCard;
    private javax.swing.JPanel jPanelScreen;
    private javax.swing.JPanel jPanelkeypad;
    // End of variables declaration//GEN-END:variables
    Screen screen = new Screen();
    Keypad keypad = new Keypad();
    private boolean userAuthenticated; // whether user is authenticated
    private int currentAccountNumber; // current user's account number
    //private Screen screen; // ATM's screen
    //private Keypad keypad; // ATM's keypad
    private CashDispenser cashDispenser; // ATM's cash dispenser
    private DepositSlot depositSlot; // ATM's deposit slot
    private CardSlot cardSlot;// ATM's card slot
    private BankDatabase bankDatabase; // account information database
    // constants corresponding to main menu options
    private static final int BALANCE_INQUIRY = 1;
    private static final int WITHDRAWAL = 2;
    private static final int DEPOSIT = 3;
    private static final int EXIT = 4;

    public void jPanelDepositSlotDraw(String imgUrl) {
        ImageIcon img = new ImageIcon(getClass().getResource(imgUrl));
        jLabelImageDepositSlot.setIcon(img);
        jPanelDepositSlot.add(jLabelImageDepositSlot);
    }

    public void jPanelInsertCardDraw(String imgUrl) {
        ImageIcon img = new ImageIcon(getClass().getResource(imgUrl));
        jLabelImageInsertCard.setIcon(img);
        jPanelInsertCard.add(jLabelImageInsertCard);
    }

    // start ATM
    public void start() {
        // welcome and authenticate user; perform transactions
        while (true) {
            // insert card
            screen.displayMessageLine("\nInsert your credit card please:");
            screen.diplayInsertCardImage();// display insert card image
            cardSlot.checkCard();// wait for the credit card
            screen.clearMessageScreen();// clear the insert card image
            // loop while user is not yet authenticated
            while (!userAuthenticated) {
                screen.displayMessageLine("\nWelcome!");
                authenticateUser(); // authenticate user
            } // end while

            performTransactions(); // user is now authenticated
            userAuthenticated = false; // reset before next ATM session
            currentAccountNumber = 0; // reset before next ATM session
            screen.displayMessageLine("\nThank you! Goodbye!");
            delay(4000);
            screen.clearMessageScreen();
            screen.clearRemoveCardImage();// clear remove card image
        } // end while
    } // end method start

    // attempts to authenticate user against database
    private void authenticateUser() {
        screen.displayMessageLine("\nPlease enter your account number: ");
        int accountNumber = keypad.getInput(); // input account number
        screen.displayMessageLine("\nEnter your PIN: "); // prompt for PIN
        int pin = keypad.getInput(); // input PIN

        // set userAuthenticated to boolean value returned by database
        userAuthenticated =
                bankDatabase.authenticateUser(accountNumber, pin);

        // check whether authentication succeeded
        if (userAuthenticated) {
            currentAccountNumber = accountNumber; // save user's account #
        } // end if
        else {
            screen.displayMessageLine(
                    "Invalid account number or PIN. Please try again.");
        }
        delay(2000);
        screen.clearMessageScreen();
    } // end method authenticateUser

    // display the main menu and perform transactions
    private void performTransactions() {
        // local variable to store transaction currently being processed
        Transaction currentTransaction = null;

        boolean userExited = false; // user has not chosen to exit

        // loop while user has not chosen option to exit system
        while (!userExited) {
            // show main menu and get user selection
            int mainMenuSelection = displayMainMenu();

            // decide how to proceed based on user's menu selection
            switch (mainMenuSelection) {
                // user chose to perform one of three transaction types
                case BALANCE_INQUIRY:
                case WITHDRAWAL:
                case DEPOSIT:

                    // initialize as new object of chosen type
                    currentTransaction =
                            createTransaction(mainMenuSelection);

                    currentTransaction.execute(); // execute transaction
                    break;
                case EXIT: // user chose to terminate session
                    screen.clearMessageScreen();
                    screen.displayMessageLine("\nExiting the system...");
                    userExited = true; // this ATM session should end
                    delay(1000);
                    screen.displayMessageLine("\nRemove your credit card please");
                    screen.diplayRemoveCardImage();// display remove card image
                    break;
                default: // user did not enter an integer from 1-4
                    screen.displayMessageLine(
                            "\nYou did not enter a valid selection. Try again.");
                    break;
            } // end switch
        } // end while
    } // end method performTransactions

    // display the main menu and return an input selection
    private int displayMainMenu() {
        delay(1000);
        screen.clearMessageScreen();
        screen.displayMessageLine("\nMain menu:");
        screen.displayMessageLine("1 - View my balance");
        screen.displayMessageLine("2 - Withdraw cash");
        screen.displayMessageLine("3 - Deposit funds");
        screen.displayMessageLine("4 - Exit\n");
        screen.displayMessageLine("Enter a choice: ");
        return keypad.getInput(); // return user's selection
    } // end method displayMainMenu

    // return object of specified Transaction subclass
    private Transaction createTransaction(int type) {
        Transaction temp = null; // temporary Transaction variable

        // determine which type of Transaction to create
        switch (type) {
            case BALANCE_INQUIRY: // create new BalanceInquiry transaction
                temp = new BalanceInquiry(
                        currentAccountNumber, screen, bankDatabase, keypad);
                break;
            case WITHDRAWAL: // create new Withdrawal transaction
                temp = new Withdrawal(currentAccountNumber, screen,
                        bankDatabase, keypad, cashDispenser);
                break;
            case DEPOSIT: // create new Deposit transaction
                temp = new Deposit(currentAccountNumber, screen,
                        bankDatabase, keypad, depositSlot);
                break;
        } // end switch

        return temp; // return the newly created object
    } // end method createTransaction

    public static void delay(long ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
            Logger.getLogger(ATMGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}


/**************************************************************************
 *  2009-2010 by SENOUCI hadj.
 *  Email: senoucihs@gmail.com
 *  this code is free which mean
 *  you can re-utilize it as you want
 *************************************************************************/